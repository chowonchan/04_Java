[상속]

다른 클래스가 가지고 있는 멤버(필드, 메서드)들을 새로 작성할 클래스에서 직접 만들지 않고
상속을 받음으로써 새 클래스가 자신의 멤버처럼 사용할 수 있는 기능

- [상속의 목적]

  클래스의 재사용, 연관된 일련의 클래스들에 대한 공통적인 규약 정의


- [상속 장점]
		1. 코드 길이 감소
		 	-> 부모 필드/메서드를 자식이 안써도 사용가능
		 
		2. 재사용성 증가
		 	-> super(), super 참조변수를 이용해
		 		자식이 부모 코드를 호출해서 자식 코드 길이 감소
		 
		3. 공통적인 코드 관리, 유지 보수성 증가
		 	-> 부모의 코드만 수정해도
		 		부모 코드를 활용하던 자식의 코드도 일괄 수정
    
    4. 자식에게 상속하는 기능의 이름을 강제할 수 있음
		   -> 오버라이딩 시 
		 	부모의 메서드명과 동일해야 한다!!


[다형성]

상속을 이용한 기술로 부모 클래스 타입 참조변수 하나로
상속 관계에 있는 여러 타입의 자식 객체를 참조할 수 있는 기술

한 객체가 2가지 모습을 가짐 

Parent 참조 변수 p2가 Child 객체를 참조하고 있지만
Child 내부에 구현된 Parent만을 참조할 수있기 때문에
Child 객체가 Parent 객체로 변한 것이 보인다!!

	오버 로딩   - 동일 한 동작을 요구 할 떄 매개 변수가 다른 경우를 유연하게 대체

	객체 다형성 - 상속 관계에서 "참조변수"의 자료형에 따라 참조 당하는
								"객체"의 자료형이 변하는 것 처럼 보임

[오버라이딩 과 오버로딩 차이]

- 오버라이딩 : 메서드 이름 동일 매개변수 동일(개수, 타입, 순서) 리턴 타입 동일

- 오버로딩 : 메서드 이름 동일 매개변수 다름(개수, 타입, 순서) 리턴 타입 상관 없음


- [업 캐스팅 (Up Casting)] 자식 -> 부모
  - [부모타입]의 참조형 변수가
  모든 (자식 타입) 객체의 주소를 참조할 수 있음

	참조 당하는 자식 객체의 전체가 아니라 내부에 존재하는
	[부모 객체]만 참조 하게됨


- [다운 캐스팅(Down Casting)] 부모 -> 자식
  - 업 캐스팅 상태에서 (부모 = 자식 객체)
	  참조 변수의 자료형을
	  자식 객체 자료형으로 강제 형 변환 하는 것

		(자식) 참조 변수 = (자식) 객체 ; 형태로 변경
			-> 부모 부분만 참조하다가 다시 자식 객체 전체를 참조하게 바뀜

				--> 부모 객체가 자식 객체로 변한 것처럼 보임

    [instanceof]
    참조 하고 있는 객체가 클래스명 객체가 맞는지 확인
		 *  (true/false)로 반환

     ****** 주의 사항 ******
		 * - instanceof는 참조하고 있는 객체의
		 * 	 상속하고 있는 객체도 같이 확인하기 때문에
		 * 	 자식 객체를 참조하는 변수에
		 * 	 부모 타입을 검사하면 true가 나온다 !!
     * 
     * 	Parent p = new Child(); // 업 캐스팅
		 
		 	
		
		// 향상된 for문
		for(Object obj : arr) {
			/* tip. 자료형을 연달아 검사하는경우
			 * 마지막 자식 자료형 부터 검사하는게 좋다!
			 */
			
			// 얻어온 요소가 Child 타입이면
			if(obj instanceof Child) 
			p instanceof Child  ? true
		
		  p instanceof Parent ? true

      p instanceof Object ? true
			
			// 얻어온 요소가 Parent 타입이면
			if(obj instanceof Parent) 
      p instanceof Child  ? false
		
		  p instanceof Parent ? true

      p instanceof Object ? true
			
			// 얻어온 요소가 Object 타입이면
			if(obj instanceof Object)
			p instanceof Child  ? false
		
		  p instanceof Parent ? false

      p instanceof Object ? true
    }


		[바인딩] 묶음, 연결
		실제 실행할 메소드 코드와 호출하는 코드를 연결 시키는 것만

		동적 메모리 영역 : heap / Stack 프로그램 시작 / 종료와 함께  생성과 소멸
		정적 메모리 영역 : Static 
			

			-[정적 바인딩]
				'프로그램이 실행되기 전' 컴파일 단계에서 메소드와 메소드 호출부를 연결


			-[동적 바인딩]
				'컴파일 시' 정적 바인딩된 메소드를 실행할 당시의 객체 타입을 기준으로 바인딩 되는 것

			
			-[추상클래스]
				몸체 없는 메소드를 포함한 클래스 (미완성 설계도)
				추상 클래스일 경우 클래스 선언부에 abstract 키워드 사용

				자식이 부모의 메서드를 오버라이딩하면 
				오버라이딩한 메서드가 우선권을 가지기때문

				부모의 추상메서드는 없는셈 쳐도 문제 없다
				-> 자식 객체 내 부모 객체가 추상이 아닌 정상적인 모습 인식

			-[추상메소드]
			 추상 메소드의 선언부에 abstract 키워드 사용
			 상속 시 반드시 구현해야 하는, 오버라이딩이 '강제화'되는 메소드

[인터페이스]
1) 극한의 추상화 - 유연성 확보
2) 클래스간의 접점 (억지로 공통점 찾기)